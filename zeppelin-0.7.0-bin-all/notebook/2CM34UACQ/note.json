{
  "paragraphs": [
    {
      "text": "import pandas as pd     \nimport numpy as np\nimport heapq    \nimport glob\nimport os   \n\nimport math\nfrom collections import defaultdict",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 3:46:01 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498733730225_-394490617",
      "id": "20170629-125530_1695150477",
      "dateCreated": "Jun 29, 2017 12:55:30 PM",
      "dateStarted": "Jul 4, 2017 3:46:01 PM",
      "dateFinished": "Jul 4, 2017 3:46:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Flink evaluation part",
      "text": "userVec \u003d pd.read_csv(\u0027userVector.map\u0027, delimiter \u003d \u0027;\u0027, header \u003d None)\n\ntemp \u003d userVec.groupby([0,1])[0].agg({\u0027Frequency\u0027:\u0027count\u0027})\nuserVectors \u003d {k:list(temp.ix[k].index) for k in temp.index.levels[0]}",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 1:54:44 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 280.0,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498733737470_-461421601",
      "id": "20170629-125537_745128020",
      "dateCreated": "Jun 29, 2017 12:55:37 PM",
      "dateStarted": "Jul 4, 2017 1:54:44 PM",
      "dateFinished": "Jul 4, 2017 1:54:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "itemVec \u003d pd.read_csv(\u0027itemVector.map\u0027, delimiter \u003d \u0027;\u0027, header \u003d None)\n\ntemp \u003d itemVec.groupby([0,1])[0].agg({\u0027Frequency\u0027:\u0027count\u0027})\nitemVectors \u003d {k:list(temp.ix[k].index) for k in temp.index.levels[0]}",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 1:54:45 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498733883561_640685307",
      "id": "20170629-125803_567860690",
      "dateCreated": "Jun 29, 2017 12:58:03 PM",
      "dateStarted": "Jul 4, 2017 1:54:45 PM",
      "dateFinished": "Jul 4, 2017 1:55:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "userItemTests \u003d pd.read_csv(\u0027data_session_test\u0027, delimiter \u003d \u0027 \u0027, header \u003d None, names \u003d [\"user\", \"item\"])\nuserItemTests[\u0027score\u0027] \u003d 1\n\nuserItemTests.head()",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 3:32:23 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "   user   item  score\n0     2   5485      1\n1     2   2875      1\n2     2   6789      1\n3     2    122      1\n4     2  17389      1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498734346294_722359343",
      "id": "20170629-130546_1802189169",
      "dateCreated": "Jun 29, 2017 1:05:46 PM",
      "dateStarted": "Jul 4, 2017 3:32:23 PM",
      "dateFinished": "Jul 4, 2017 3:32:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "userItemTrains \u003d pd.read_csv(\u0027data_session_train\u0027, delimiter \u003d \u0027 \u0027, header \u003d None)\n\ntemp \u003d userItemTrains.groupby([1,2])[1].agg({\u0027Frequency\u0027:\u0027count\u0027})\nuserItemTrain \u003d {k:list(temp.ix[k].index) for k in temp.index.levels[0]}",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 1:54:46 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498736286612_1272659708",
      "id": "20170629-133806_1286069022",
      "dateCreated": "Jun 29, 2017 1:38:06 PM",
      "dateStarted": "Jul 4, 2017 1:55:09 PM",
      "dateFinished": "Jul 4, 2017 1:55:18 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "userRecommendations \u003d {}\nactiveUsers \u003d set(set(userItemTrains[1]).intersection(set(userItemTest.keys()))).intersection(set(userVectors.keys()))\nactiveItems \u003d (set(userItemTests[1].unique())).intersection(set(userItemTrains[2].unique()))",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 2:24:16 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498736295568_1924824417",
      "id": "20170629-133815_917423687",
      "dateCreated": "Jun 29, 2017 1:38:15 PM",
      "dateStarted": "Jul 4, 2017 2:24:16 PM",
      "dateFinished": "Jul 4, 2017 2:24:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create topK recommendations",
      "text": "k \u003d 10\n\nfor userID in activeUsers:\n    u \u003d np.array(userVectors[userID])\n    userRatings \u003d {}\n    for itemID in activeItems - set(userItemTrain[userID]):\n        i \u003d np.array(itemVectors[itemID])\n        prediction \u003d np.dot(u,i)\n        userRatings[itemID] \u003d prediction\n        \n    userRecommendations[userID] \u003d heapq.nlargest(k, userRatings, key\u003duserRatings.get) \n    for idx in range(k):\n        itemId \u003d userRecommendations[userID][idx]\n        userRecommendations[userID][idx] \u003d (itemId, idx + 1)\n        \n    ",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:04:47 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498737228974_-341952993",
      "id": "20170629-135348_180474626",
      "dateCreated": "Jun 29, 2017 1:53:48 PM",
      "dateStarted": "Jul 4, 2017 5:04:47 PM",
      "dateFinished": "Jul 4, 2017 5:06:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Precision + Recall",
      "text": "hit \u003d 0.0\ncount \u003d 0.0\n\nfor userID in activeUsers:\n    hit +\u003d len(set(userItemTest[userID]).intersection(set(map(lambda x: x[0], userRecommendations[userID]))))\n    count +\u003d len(userItemTest[userID])\n    \n\nrecall \u003d hit / count\nprecision \u003d hit / (len(userRecommendations) * float(k))\n\nprint(recall)\nprint(precision)\nprint(hit)",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:08:57 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "... ... ... ... 0.02219596590429572\n0.006745319312644268\n263.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498737247743_803105706",
      "id": "20170629-135407_1104131842",
      "dateCreated": "Jun 29, 2017 1:54:07 PM",
      "dateStarted": "Jul 4, 2017 5:08:57 PM",
      "dateFinished": "Jul 4, 2017 5:08:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "NDCG",
      "text": "userItemTests \u003d pd.read_csv(\u0027data_session_test\u0027, delimiter \u003d \u0027 \u0027, header \u003d None, names \u003d [\"user\", \"item\"])\nuserItemTests[\u0027score\u0027] \u003d 1",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:04:53 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498837852731_204212176",
      "id": "20170630-175052_1997031746",
      "dateCreated": "Jun 30, 2017 5:50:52 PM",
      "dateStarted": "Jul 4, 2017 5:06:51 PM",
      "dateFinished": "Jul 4, 2017 5:06:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "recommendationsList \u003d []\nfor (userID, itemID_ranks_list) in userRecommendations.items():\n    for (itemID, rank) in itemID_ranks_list:\n        recommendationsList.append((userID, itemID, rank))\n\n    \nrec \u003d pd.DataFrame(recommendationsList)\nrec.columns \u003d [\u0027user\u0027, \u0027item\u0027, \u0027rank\u0027]\n    ",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:04:57 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498837870075_-1878418296",
      "id": "20170630-175110_291108853",
      "dateCreated": "Jun 30, 2017 5:51:10 PM",
      "dateStarted": "Jul 4, 2017 5:06:51 PM",
      "dateFinished": "Jul 4, 2017 5:06:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\ndef ndcg_fast2(test, recommendations, top_k\u003d100):\n    \n    to_join\u003dtest\\\n        .drop_duplicates(subset\u003d[\u0027user\u0027,\u0027item\u0027])[[\u0027user\u0027,\u0027item\u0027,\u0027score\u0027]]\\\n        .rename(columns\u003d{\u0027score\u0027:\u0027score_test\u0027})\\\n        .set_index([\u0027user\u0027,\u0027item\u0027])\n    recs \u003d recommendations.join(to_join, on\u003d[\u0027user\u0027,\u0027item\u0027], how\u003d\u0027inner\u0027).copy()\n    \n    users \u003d set(recommendations[\u0027user\u0027]) \u0026 set(test[\u0027user\u0027])\n    idcgs \u003d pd.DataFrame({\u0027user\u0027:list(users)}).set_index(\u0027user\u0027).sort_index()\n    idcg_map \u003d defaultdict(lambda:0)\n    for i in range(1,top_k+1):\n        idcg_map[i]\u003didcg_map[i-1]+1.0/math.log(i+1,2)\n    \n    idcg_map\u003ddict(idcg_map)\n    idcgs[\u0027idcg\u0027]\u003dtest.drop_duplicates(subset\u003d[\u0027item\u0027,\u0027user\u0027])\\\n            .groupby(\u0027user\u0027)\\\n            .size()\\\n            .map(idcg_map)\\\n            .fillna(idcg_map[top_k])\n    recs[\u0027dg\u0027]\u003drecs[\u0027score_test\u0027]/np.log2(recs[\u0027rank\u0027]+1)\n    dcgs \u003d recs.groupby(\u0027user\u0027)[\u0027dg\u0027].sum()\n    ndcgs \u003d (dcgs/idcgs[\u0027idcg\u0027]).fillna(0)\n    ndcg \u003d ndcgs.mean()\n    return ndcg",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:02:09 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1499175206036_-2056912354",
      "id": "20170704-153326_1266381132",
      "dateCreated": "Jul 4, 2017 3:33:26 PM",
      "dateStarted": "Jul 4, 2017 5:02:09 PM",
      "dateFinished": "Jul 4, 2017 5:02:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "print(ndcg_fast2(userItemTests, rec, top_k \u003d k))",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:05:01 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0.017271429324954842\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499175852408_101443609",
      "id": "20170704-154412_1318575000",
      "dateCreated": "Jul 4, 2017 3:44:12 PM",
      "dateStarted": "Jul 4, 2017 5:06:51 PM",
      "dateFinished": "Jul 4, 2017 5:06:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spark evaluation part",
      "text": "os.remove(\u0027sparkPredictions/_SUCCESS\u0027)\n\npath \u003d r\u0027sparkPredictions\u0027                     # use your path\nall_files \u003d glob.glob(os.path.join(path, \"*\"))     # advisable to use os.path.join as this makes concatenation OS independent\n\ndf_from_each_file \u003d (pd.read_csv(f, header\u003dNone) for f in all_files)\nsparkPredictions   \u003d pd.concat(df_from_each_file, ignore_index\u003dTrue)",
      "user": "anonymous",
      "dateUpdated": "Jul 3, 2017 4:06:44 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\nFileNotFoundError: [Errno 2] No such file or directory: \u0027sparkPredictions/_SUCCESS\u0027\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498813329319_-58518322",
      "id": "20170630-110209_1193223186",
      "dateCreated": "Jun 30, 2017 11:02:09 AM",
      "dateStarted": "Jul 3, 2017 4:06:44 PM",
      "dateFinished": "Jul 3, 2017 4:06:44 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "sparkPredictions[0] \u003d sparkPredictions[0].map(lambda x: int(x.lstrip(\u0027(\u0027)))\nsparkPredictions[1] \u003d sparkPredictions[1].map(lambda x: int(x.rstrip(\u0027)\u0027)))\n\nsparkPredictions.head()",
      "user": "anonymous",
      "dateUpdated": "Jul 3, 2017 4:06:48 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "            0     1\n0  1390519981   939\n1  1390519981    78\n2  1390519981  1163\n3  1390519981   206\n4  1390519981   672\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498747399344_-1478895181",
      "id": "20170629-164319_355678857",
      "dateCreated": "Jun 29, 2017 4:43:19 PM",
      "dateStarted": "Jul 3, 2017 4:06:48 PM",
      "dateFinished": "Jul 3, 2017 4:06:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "temp \u003d sparkPredictions.groupby([0,1])[0].agg({\u0027Frequency\u0027:\u0027count\u0027})\nsparkRecommendations \u003d {k:list(temp.ix[k].index) for k in temp.index.levels[0]}\n",
      "user": "anonymous",
      "dateUpdated": "Jul 3, 2017 4:06:58 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498748411385_-431772307",
      "id": "20170629-170011_979163103",
      "dateCreated": "Jun 29, 2017 5:00:11 PM",
      "dateStarted": "Jul 3, 2017 4:06:58 PM",
      "dateFinished": "Jul 3, 2017 4:07:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "hit \u003d 0.0\ncount \u003d 0.0\n\nfor userID in activeUsers:\n    hit +\u003d len(set(userItemTest[userID]).intersection(set(userRecommendations[userID])))\n    count +\u003d len(userItemTest[userID])",
      "user": "anonymous",
      "dateUpdated": "Jul 3, 2017 4:07:03 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1498814675376_606242934",
      "id": "20170630-112435_1212533286",
      "dateCreated": "Jun 30, 2017 11:24:35 AM",
      "dateStarted": "Jul 3, 2017 4:07:03 PM",
      "dateFinished": "Jul 3, 2017 4:07:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "recall \u003d hit / count\nprecision \u003d hit / (len(userRecommendations) * 5.0)\n\nprint(recall)\nprint(precision)\nprint(hit)",
      "user": "anonymous",
      "dateUpdated": "Jul 3, 2017 4:07:05 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0.008858267716535433\n0.0034416826003824093\n27.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498837928435_1903571447",
      "id": "20170630-175208_1437620175",
      "dateCreated": "Jun 30, 2017 5:52:08 PM",
      "dateStarted": "Jul 3, 2017 4:07:05 PM",
      "dateFinished": "Jul 3, 2017 4:07:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498816901560_-717674219",
      "id": "20170630-120141_183350303",
      "dateCreated": "Jun 30, 2017 12:01:41 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Tester",
  "id": "2CM34UACQ",
  "angularObjects": {
    "2CK72QMC5:shared_process": [],
    "2CKXYZ6CN:shared_process": [],
    "2CMTWB74R:shared_process": [],
    "2CKS4TJTK:shared_process": [],
    "2CMHDPRT3:shared_process": [],
    "2CJZ774GG:shared_process": [],
    "2CJTTF25Z:shared_process": [],
    "2CKM3CRYB:shared_process": [],
    "2CN17ZKCE:shared_process": [],
    "2CNBPAE22:shared_process": [],
    "2CKHHD5Y3:shared_process": [],
    "2CPGBTGZR:shared_process": [],
    "2CMMTM4MK:shared_process": [],
    "2CMASUG7B:shared_process": [],
    "2CKKGRVGB:shared_process": [],
    "2CNNQKFTP:shared_process": [],
    "2CMK1BN3B:shared_process": [],
    "2CPQCC3MT:shared_process": [],
    "2CKFWAW5R:shared_process": []
  },
  "config": {},
  "info": {}
}