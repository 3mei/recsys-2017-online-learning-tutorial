{
  "paragraphs": [
    {
      "text": "import java.io.{File, PrintWriter}\n\nimport hu.sztaki.ilab.ps.matrix.factorization.Utils._\nimport hu.sztaki.ilab.ps.matrix.factorization.PSTopKGeneratorWithLEMP._\nimport org.apache.flink.api.common.functions.RichFlatMapFunction\nimport org.apache.flink.streaming.api.functions.sink.RichSinkFunction\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.util.Collector\n\n\nimport scala.collection.mutable\nimport scala.collection.mutable.ArrayBuffer",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 7:14:53 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import java.io.{File, PrintWriter}\nimport hu.sztaki.ilab.ps.matrix.factorization.Utils._\nimport hu.sztaki.ilab.ps.matrix.factorization.PSTopKGeneratorWithLEMP._\nimport org.apache.flink.api.common.functions.RichFlatMapFunction\nimport org.apache.flink.streaming.api.functions.sink.RichSinkFunction\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.util.Collector\nimport scala.collection.mutable\nimport scala.collection.mutable.ArrayBuffer\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501261999722_-2013530581",
      "id": "20170728-191319_552594448",
      "dateCreated": "Jul 28, 2017 7:13:19 PM",
      "dateStarted": "Jul 28, 2017 7:14:53 PM",
      "dateFinished": "Jul 28, 2017 7:15:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "senv.setParallelism(4) ",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 7:16:43 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1501262093242_-1285646959",
      "id": "20170728-191453_430420236",
      "dateCreated": "Jul 28, 2017 7:14:53 PM",
      "dateStarted": "Jul 28, 2017 7:16:43 PM",
      "dateFinished": "Jul 28, 2017 7:16:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val bucketK \u003d 50\nval bucketSize \u003d 100\nval K \u003d 100\nval pullLimit \u003d 300\nval workerParallelism \u003d 4\nval psParallelism \u003d 4\nval iterationWaitTime \u003d 10000\nval numFactors \u003d 20",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 7:19:42 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "bucketK: Int \u003d 50\nbucketSize: Int \u003d 100\nK: Int \u003d 100\npullLimit: Int \u003d 300\nworkerParallelism: Int \u003d 4\npsParallelism: Int \u003d 4\niterationWaitTime: Int \u003d 10000\nnumFactors: Int \u003d 20\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501262294432_855186222",
      "id": "20170728-191814_972779207",
      "dateCreated": "Jul 28, 2017 7:18:14 PM",
      "dateStarted": "Jul 28, 2017 7:19:42 PM",
      "dateFinished": "Jul 28, 2017 7:19:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val testData \u003d senv.readTextFile(\"data_session_test\")\nval model \u003d senv.readTextFile(\"model\")",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 7:17:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "testData: org.apache.flink.streaming.api.scala.DataStream[String] \u003d org.apache.flink.streaming.api.scala.DataStream@21870a90\nmodel: org.apache.flink.streaming.api.scala.DataStream[String] \u003d org.apache.flink.streaming.api.scala.DataStream@71d283b0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501262203695_-2019947074",
      "id": "20170728-191643_73649697",
      "dateCreated": "Jul 28, 2017 7:16:43 PM",
      "dateStarted": "Jul 28, 2017 7:17:15 PM",
      "dateFinished": "Jul 28, 2017 7:17:17 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val testInput \u003d testData.map(line \u003d\u003e\n  Rating(line.split(\" \")(1).toInt, line.split(\" \")(2).toInt, 1.0))",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 7:17:37 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "testInput: org.apache.flink.streaming.api.scala.DataStream[hu.sztaki.ilab.ps.matrix.factorization.Utils.Rating] \u003d org.apache.flink.streaming.api.scala.DataStream@1fe3b4f4\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501262229371_998454019",
      "id": "20170728-191709_1612329607",
      "dateCreated": "Jul 28, 2017 7:17:09 PM",
      "dateStarted": "Jul 28, 2017 7:17:37 PM",
      "dateFinished": "Jul 28, 2017 7:17:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val parsedModel \u003d model.flatMap(new RichFlatMapFunction[String, Either[(UserId, LengthAndVector), (ItemId, LengthAndVector)]] {\n  val itemVectors \u003d new mutable.HashMap[ItemId, ArrayBuffer[Double]]()\n  val userVectors \u003d new mutable.HashMap[UserId, ArrayBuffer[Double]]()\n\n  override def flatMap(value: String, out: Collector[Either[(UserId, LengthAndVector), (ItemId, LengthAndVector)]]): Unit \u003d {\n    val fieldsArray \u003d value.split(\";\")\n\n    val id \u003d fieldsArray(1).toInt\n    val currentVector \u003d new mutable.ArrayBuffer[Double]()\n\n    for(i \u003c- 0 until numFactors){\n      currentVector +\u003d fieldsArray(i+2).toDouble\n    }\n\n    fieldsArray(0) match {\n      case \"i\" \u003d\u003e\n        out.collect(Right(id, attachLength(currentVector.toArray)))\n\n      case \"u\" \u003d\u003e\n        out.collect(Left(id, attachLength(currentVector.toArray)))\n    }\n  }\n})",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 7:19:51 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "parsedModel: org.apache.flink.streaming.api.scala.DataStream[Either[(hu.sztaki.ilab.ps.matrix.factorization.Utils.UserId, hu.sztaki.ilab.ps.matrix.factorization.Utils.LengthAndVector),(hu.sztaki.ilab.ps.matrix.factorization.Utils.ItemId, hu.sztaki.ilab.ps.matrix.factorization.Utils.LengthAndVector)]] \u003d org.apache.flink.streaming.api.scala.DataStream@30eceacf\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501262257691_681603171",
      "id": "20170728-191737_1229686368",
      "dateCreated": "Jul 28, 2017 7:17:37 PM",
      "dateStarted": "Jul 28, 2017 7:19:51 PM",
      "dateFinished": "Jul 28, 2017 7:19:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "psTopKGenerator(\n      testInput,\n      parsedModel,\n      bucketK \u003d 50,\n      bucketSize \u003d 100,\n      K \u003d 100,\n      pullLimit \u003d 100,\n      workerParallelism \u003d 4,\n      psParallelism \u003d 4,\n      iterationWaitTime \u003d 10000)\n    .addSink(new RichSinkFunction[(ItemId, List[(Double, ItemId)])] {\n    \n      var sumnDCG \u003d 0.0\n      var counter \u003d 0\n      var hit \u003d 0\n    \n      val log2: VectorLength \u003d Math.log(2)\n    \n    \n      override def invoke(value: (ItemId, List[(Double, ItemId)])): Unit \u003d {\n    \n        val index \u003d value._2.indexWhere (\n          recommendation \u003d\u003e recommendation._2 \u003d\u003d value._1 ) match {\n    \n          case -1 \u003d\u003e Int.MaxValue\n    \n          case i \u003d\u003e i + 1\n        }\n    \n    \n        val nDCG \u003d index match {\n    \n          case Int.MaxValue \u003d\u003e 0.0\n    \n          case i \u003d\u003e log2 / Math.log(1.0 + i)\n        }\n    \n        if(nDCG !\u003d 0)\n          hit +\u003d 1\n        sumnDCG +\u003d nDCG\n        counter +\u003d 1\n    \n      }\n    \n      override def close(): Unit \u003d {\n        val outputFile \u003d new PrintWriter(new File(\"nDCG.out\"))\n    \n        val avgnDCG \u003d sumnDCG / counter\n        outputFile write s\"Number of invokes: $counter \\n\"\n        outputFile write s\"Sum nDCG: $sumnDCG \\n\"\n        outputFile write s\"Avg nDCG: $avgnDCG \\n\"\n        outputFile write s\"Hit: $hit\"\n    \n        outputFile.close()\n    \n      }\n}).setParallelism(1)",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 7:42:58 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res16: org.apache.flink.streaming.api.datastream.DataStreamSink[(hu.sztaki.ilab.ps.matrix.factorization.Utils.ItemId, List[(Double, hu.sztaki.ilab.ps.matrix.factorization.Utils.ItemId)])] \u003d org.apache.flink.streaming.api.datastream.DataStreamSink@7df6c4e9\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501262281939_40642152",
      "id": "20170728-191801_59374304",
      "dateCreated": "Jul 28, 2017 7:18:01 PM",
      "dateStarted": "Jul 28, 2017 7:42:58 PM",
      "dateFinished": "Jul 28, 2017 7:42:59 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "senv.execute()",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 7:43:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res18: org.apache.flink.api.common.JobExecutionResult \u003d org.apache.flink.api.common.JobExecutionResult@34649d90\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501262492028_300102473",
      "id": "20170728-192132_1029922272",
      "dateCreated": "Jul 28, 2017 7:21:32 PM",
      "dateStarted": "Jul 28, 2017 7:43:02 PM",
      "dateFinished": "Jul 28, 2017 7:46:08 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1501262510819_-1168084006",
      "id": "20170728-192150_1398808666",
      "dateCreated": "Jul 28, 2017 7:21:50 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Eval_with_Flink",
  "id": "2CRT4EW79",
  "angularObjects": {
    "2CK72QMC5:shared_process": [],
    "2CKXYZ6CN:shared_process": [],
    "2CMTWB74R:shared_process": [],
    "2CKS4TJTK:shared_process": [],
    "2CMHDPRT3:shared_process": [],
    "2CJZ774GG:shared_process": [],
    "2CJTTF25Z:shared_process": [],
    "2CKM3CRYB:shared_process": [],
    "2CN17ZKCE:shared_process": [],
    "2CNBPAE22:shared_process": [],
    "2CKHHD5Y3:shared_process": [],
    "2CPGBTGZR:shared_process": [],
    "2CMMTM4MK:shared_process": [],
    "2CMASUG7B:shared_process": [],
    "2CKKGRVGB:shared_process": [],
    "2CNNQKFTP:shared_process": [],
    "2CMK1BN3B:shared_process": [],
    "2CPQCC3MT:shared_process": [],
    "2CKFWAW5R:shared_process": []
  },
  "config": {},
  "info": {}
}