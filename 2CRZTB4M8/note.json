{
  "paragraphs": [
    {
      "text": "%python\nimport pandas as pd\nimport numpy as np\nimport heapq\nimport glob\nimport os\nimport shutil\nimport math\nfrom collections import defaultdict\nimport pyarrow.parquet as pq",
      "user": "anonymous",
      "dateUpdated": "Aug 10, 2017 11:41:05 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1501759629101_-1187359513",
      "id": "20170629-125530_1695150477",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "dateStarted": "Aug 10, 2017 11:41:05 AM",
      "dateFinished": "Aug 10, 2017 11:41:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%flink\r\nimport org.apache.flink.streaming.api.scala._\r\n\r\nimport hu.sztaki.ilab.ps.matrix.factorization.Utils._\r\nimport hu.sztaki.ilab.ps.matrix.factorization.data.parsers._\r\nimport hu.sztaki.ilab.ps.matrix.factorization._",
      "user": "anonymous",
      "dateUpdated": "Aug 10, 2017 1:02:03 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.flink.streaming.api.scala._\nimport hu.sztaki.ilab.ps.matrix.factorization.Utils._\nimport hu.sztaki.ilab.ps.matrix.factorization.data.parsers._\nimport hu.sztaki.ilab.ps.matrix.factorization._\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759635452_1207702390",
      "id": "20170803-132715_2082215327",
      "dateCreated": "Aug 3, 2017 1:27:15 PM",
      "dateStarted": "Aug 10, 2017 1:02:03 PM",
      "dateFinished": "Aug 10, 2017 1:02:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%flink\nsenv.setParallelism(4)",
      "user": "anonymous",
      "dateUpdated": "Aug 10, 2017 1:02:07 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1501759762052_-1542666638",
      "id": "20170803-132922_686332586",
      "dateCreated": "Aug 3, 2017 1:29:22 PM",
      "dateStarted": "Aug 10, 2017 1:02:08 PM",
      "dateFinished": "Aug 10, 2017 1:02:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%flink\nval trainDataPath \u003d \"/home/rpalovics/train_batch\"\nval data \u003d ImplicitDataToRatingParser.parse(senv,trainDataPath,\",\",1,2).map{_ match {case Rating(x,y,z)\u003d\u003e(x,y,z)}}",
      "user": "anonymous",
      "dateUpdated": "Aug 10, 2017 1:05:58 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "trainDataPath: String \u003d /home/rpalovics/train_batch\ndata: org.apache.flink.streaming.api.scala.DataStream[(hu.sztaki.ilab.ps.matrix.factorization.Utils.UserId, hu.sztaki.ilab.ps.matrix.factorization.Utils.ItemId, Double)] \u003d org.apache.flink.streaming.api.scala.DataStream@3162c284\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759787828_-1183280517",
      "id": "20170803-132947_233557466",
      "dateCreated": "Aug 3, 2017 1:29:47 PM",
      "dateStarted": "Aug 10, 2017 1:05:58 PM",
      "dateFinished": "Aug 10, 2017 1:06:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%flink\nval userVectorFileName \u003d \"userVector.map\"\nval itemVectorFileName \u003d \"itemVector.map\"  \nPSOfflineMatrixFactorization.psOfflineMF(data,\n            numFactors \u003d 10,\n            learningRate \u003d 0.05,\n            iterations \u003d 4,\n            minRange \u003d -0.01,\n            maxRange \u003d 0.01,\n            pullLimit \u003d 200,\n            negativeSampleRate \u003d 20,\n            workerParallelism \u003d 4,\n            psParallelism \u003d 4,\n            iterationWaitTime \u003d 20000)",
      "user": "anonymous",
      "dateUpdated": "Aug 10, 2017 1:17:19 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "userVectorFileName: String \u003d userVector.map\nitemVectorFileName: String \u003d itemVector.map\nres23: org.apache.flink.streaming.api.scala.DataStream[Either[(hu.sztaki.ilab.ps.matrix.factorization.Utils.UserId, hu.sztaki.ilab.ps.matrix.factorization.PSOfflineMatrixFactorization.Vector),(hu.sztaki.ilab.ps.matrix.factorization.Utils.ItemId, hu.sztaki.ilab.ps.matrix.factorization.PSOfflineMatrixFactorization.Vector)]] \u003d hu.sztaki.ilab.ps.utils.DataStreamWithNameableFunctions@731c3fcd\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759800364_-1743292670",
      "id": "20170803-133000_951117325",
      "dateCreated": "Aug 3, 2017 1:30:00 PM",
      "dateStarted": "Aug 10, 2017 1:17:19 PM",
      "dateFinished": "Aug 10, 2017 1:17:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%flink\nsenv.execute()",
      "user": "anonymous",
      "dateUpdated": "Aug 10, 2017 1:17:25 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": "org.apache.thrift.transport.TTransportException",
      "apps": [],
      "jobName": "paragraph_1501759814852_1803722764",
      "id": "20170803-133014_732234976",
      "dateCreated": "Aug 3, 2017 1:30:14 PM",
      "dateStarted": "Aug 10, 2017 1:17:25 PM",
      "dateFinished": "Aug 10, 2017 1:30:08 PM",
      "status": "ERROR",
      "errorMessage": "org.apache.thrift.transport.TTransportException\n\tat org.apache.thrift.transport.TIOStreamTransport.read(TIOStreamTransport.java:132)\n\tat org.apache.thrift.transport.TTransport.readAll(TTransport.java:86)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readAll(TBinaryProtocol.java:429)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readI32(TBinaryProtocol.java:318)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:219)\n\tat org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:69)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.recv_interpret(RemoteInterpreterService.java:266)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.interpret(RemoteInterpreterService.java:250)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:373)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:97)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:406)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:329)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:748)\n",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spark offline",
      "text": "%spark\nimport java.io.File\n\nimport scala.io.Source\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\nimport org.apache.spark.mllib.recommendation.{ALS, Rating, MatrixFactorizationModel}",
      "user": "anonymous",
      "dateUpdated": "Aug 8, 2017 4:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport java.io.File\n\nimport scala.io.Source\n\nimport org.apache.spark.SparkConf\n\nimport org.apache.spark.SparkContext\n\nimport org.apache.spark.SparkContext._\n\nimport org.apache.spark.rdd._\n\nimport org.apache.spark.mllib.recommendation.{ALS, Rating, MatrixFactorizationModel}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759828044_-651344643",
      "id": "20170803-133028_988330663",
      "dateCreated": "Aug 3, 2017 1:30:28 PM",
      "dateStarted": "Aug 8, 2017 4:32:25 PM",
      "dateFinished": "Aug 8, 2017 4:33:02 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval train \u003d sc.textFile(new File(\"data_session_train\").toString).map { line \u003d\u003e\n  val fields \u003d line.split(\" \")\n  Rating(fields(1).toInt, fields(2).toInt, 1.0)\n}",
      "user": "anonymous",
      "dateUpdated": "Aug 3, 2017 1:31:38 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ntrain: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] \u003d MapPartitionsRDD[128] at map at \u003cconsole\u003e:49\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759880748_1011817583",
      "id": "20170803-133120_1363056960",
      "dateCreated": "Aug 3, 2017 1:31:20 PM",
      "dateStarted": "Aug 3, 2017 1:31:38 PM",
      "dateFinished": "Aug 3, 2017 1:31:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rank \u003d 20\nval numIter \u003d 4\nval lambda \u003d 0.01\nval alpha \u003d 2\n\nval model \u003d ALS.trainImplicit(train, rank, numIter, lambda, alpha)",
      "user": "anonymous",
      "dateUpdated": "Aug 3, 2017 1:32:06 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nrank: Int \u003d 20\n\nnumIter: Int \u003d 4\n\nlambda: Double \u003d 0.01\n\nalpha: Int \u003d 2\n\nmodel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel \u003d org.apache.spark.mllib.recommendation.MatrixFactorizationModel@72bbe692\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759914883_627514728",
      "id": "20170803-133154_1606989966",
      "dateCreated": "Aug 3, 2017 1:31:54 PM",
      "dateStarted": "Aug 3, 2017 1:32:06 PM",
      "dateFinished": "Aug 3, 2017 1:32:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "try:    \n    shutil.rmtree(\u0027sparkPrediction\u0027)\nexcept FileNotFoundError:\n    pass",
      "user": "anonymous",
      "dateUpdated": "Aug 3, 2017 1:33:27 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1501759945700_977098237",
      "id": "20170803-133225_644186067",
      "dateCreated": "Aug 3, 2017 1:32:25 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nmodel.save(sc, \"sparkPrediction\")",
      "user": "anonymous",
      "dateUpdated": "Aug 3, 2017 1:33:46 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1501760008455_-182626893",
      "id": "20170803-133328_243207999",
      "dateCreated": "Aug 3, 2017 1:33:28 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluation",
      "text": "def get_user_data(filename,delimiter,columns,name):\n    vec \u003d pd.read_csv(filename, delimiter \u003d delimiter, header \u003d None)\n    vec_dict \u003d pd.DataFrame(vec.groupby(columns[0])[columns[1]].apply(list))\n    vec_dict.columns\u003d[name]\n    return vec_dict\n\ndef read_vectors_pq(path, colname):\n    try:\n        os.remove(\u0027sparkPrediction/data/product/_SUCCESS\u0027)\n    except FileNotFoundError:\n        pass\n\n    path \u003d path \n    all_files \u003d glob.glob(os.path.join(path, \"*\"))\n    \n    df_from_each_file \u003d (pq.read_table(f).to_pandas() for f in all_files)\n    vec   \u003d pd.concat(df_from_each_file, ignore_index\u003dTrue)\n    vec.columns\u003d[\u0027user\u0027,colname]\n    vec.set_index(\u0027user\u0027, inplace\u003dTrue)\n    return vec",
      "dateUpdated": "Aug 3, 2017 1:35:03 PM",
      "config": {
        "enabled": true,
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 280.0,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1501759629103_-1186590015",
      "id": "20170629-125537_745128020",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "userVectorsFlink \u003d get_user_data(\u0027userVector.map\u0027,\u0027;\u0027,[0,1],\"userVectorFlink\")\nuserVectorsSpark \u003d read_vectors_pq(\u0027sparkPrediction/data/user\u0027,\u0027userVectorSpark\u0027)\n\nitemVectorsFlink \u003d get_user_data(\u0027itemVector.map\u0027,\u0027;\u0027,[0,1],\"itemVectorFlink\")\nitemVectorsSpark \u003d read_vectors_pq(\u0027sparkPrediction/data/product\u0027,\u0027itemVectorSpark\u0027)\n\nuserItemTest2 \u003d get_user_data(\u0027data_session_test\u0027,\u0027 \u0027,[1,2],\"userItemTest\")\nuserItemTrain2 \u003d get_user_data(\u0027data_session_train\u0027,\u0027 \u0027,[1,2],\"userItemTrain\")\n\nuserdata \u003d pd.concat([userVectorsFlink,userVectorsSpark,userItemTest2,userItemTrain2],axis\u003d1)\nitemdata \u003d pd.concat([itemVectorsFlink,itemVectorsSpark],axis\u003d1)\n\nrec_types \u003d [\u0027Flink\u0027,\u0027Spark\u0027]",
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1501759629104_-1176201795",
      "id": "20170803-130033_157164128",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Active users, items",
      "text": "activeItems\u003dset([x for sublist in userdata[\"userItemTrain\"].dropna() for x in sublist])\nitemdata \u003d itemdata[itemdata[\u0027item\u0027].isin(activeItems)]\nuserdata\u003duserdata.dropna(subset\u003d[\"userItemTrain\",\"userItemTest\"])\n\nuserdata[\u0027user\u0027]\u003duserdata.index\nitemdata[\u0027item\u0027]\u003ditemdata.index\n\nfor typ in rec_types:\n    itemdata[\u0027itemVector\u0027+typ] \u003d itemdata[\u0027itemVector\u0027+typ].apply(lambda x:np.array(x))\n    userdata[\u0027userVector\u0027+typ] \u003d userdata[\u0027userVector\u0027+typ].apply(lambda x: np.array(x))\n\nprint(len(userdata),len(activeItems))",
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {
        "enabled": true,
        "title": true,
        "results": {},
        "editorMode": "ace/mode/python",
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(3899, 17012)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759629105_-1176586544",
      "id": "20170802-111641_2049314131",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create topK recommendations",
      "text": "def get_topk_recommendations(u,k,typ):\n    items\u003ditemdata.copy()\n    items[\u0027recommendation\u0027]\u003ditems[\"itemVector\"+typ].apply(lambda i: np.dot(u,i))\n    top_k_items\u003dlist(items.sort_values(\u0027recommendation\u0027,ascending\u003dFalse)[:k][\u0027item\u0027])\n    return(top_k_items)",
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {
        "enabled": true,
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1501759629106_-1175432297",
      "id": "20170629-135348_180474626",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "k\u003d10\n\nfor typ in rec_types:\n    userdata[\u0027recommendation\u0027+typ]\u003duserdata[\u0027userVector\u0027+typ].apply(lambda x: get_topk_recommendations(x,k,typ))",
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1501759629106_-1175432297",
      "id": "20170803-125946_822998847",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Precision + Recall",
      "text": "def prec_recall(data,pred_col,test_col,k):\n    data[\u0027hit\u0027] \u003d data.apply(lambda x: len(set(x[pred_col][:k]).intersection(set(x[test_col]))),axis\u003d1)\n    hit \u003d sum(data[\u0027hit\u0027])\n\n    count \u003d sum(data[test_col].apply(lambda x: len(x)))\n    recall \u003d hit/float(count)\n    precision \u003d hit/(len(data)*k)\n    return recall, precision, hit",
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {
        "enabled": true,
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Flink \n recall: 0.007511 \n precision: 0.002283 \n hits: 89\n\nSpark \n recall: 0.015276 \n precision: 0.004642 \n hits: 181\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759629107_-1175817046",
      "id": "20170629-135407_1104131842",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "for typ in rec_types:\n    recall, precision, hit \u003d prec_recall(userdata,\u0027recommendation\u0027+typ,\u0027userItemTest\u0027,k)\n    print(\"%s \\n recall: %f \\n precision: %f \\n hits: %i\\n\"%(typ,recall,precision,hit))",
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1501759629108_-1177740790",
      "id": "20170803-125934_1175749950",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "NDCG",
      "text": "def explode_df(df,user,list_col,is_ranked\u003dFalse,names\u003d[0,1,2]):\n    new_df_rows \u003d []\n    get_rank \u003d lambda i: i+1 if is_ranked else 1\n    def get_new_rows(user,item_list):\n        new_rows\u003d[]\n        for i in range(len(item_list)):\n                new_rows.append([user,item_list[i],get_rank(i)])\n        return new_rows\n    \n    for ix in df.index:\n        new_rows\u003dget_new_rows(df[user][ix],df[list_col][ix])\n        new_df_rows.extend(new_rows)\n    return pd.DataFrame(new_df_rows,columns\u003dnames)\n\ndef ndcg_fast2(test, recommendations, top_k\u003d100):\n    \n    to_join\u003dtest\\\n        .drop_duplicates(subset\u003d[\u0027user\u0027,\u0027item\u0027])[[\u0027user\u0027,\u0027item\u0027,\u0027score\u0027]]\\\n        .rename(columns\u003d{\u0027score\u0027:\u0027score_test\u0027})\\\n        .set_index([\u0027user\u0027,\u0027item\u0027])\n    recs \u003d recommendations.join(to_join, on\u003d[\u0027user\u0027,\u0027item\u0027], how\u003d\u0027inner\u0027).copy()\n    \n    users \u003d set(recommendations[\u0027user\u0027]) \u0026 set(test[\u0027user\u0027])\n    idcgs \u003d pd.DataFrame({\u0027user\u0027:list(users)}).set_index(\u0027user\u0027).sort_index()\n    idcg_map \u003d defaultdict(lambda:0)\n    for i in range(1,top_k+1):\n        idcg_map[i]\u003didcg_map[i-1]+1.0/math.log(i+1,2)\n    \n    idcg_map\u003ddict(idcg_map)\n    idcgs[\u0027idcg\u0027]\u003dtest.drop_duplicates(subset\u003d[\u0027item\u0027,\u0027user\u0027])\\\n            .groupby(\u0027user\u0027)\\\n            .size()\\\n            .map(idcg_map)\\\n            .fillna(idcg_map[top_k])\n    recs[\u0027dg\u0027]\u003drecs[\u0027score_test\u0027]/np.log2(recs[\u0027rank\u0027]+1)\n    dcgs \u003d recs.groupby(\u0027user\u0027)[\u0027dg\u0027].sum()\n    ndcgs \u003d (dcgs/idcgs[\u0027idcg\u0027]).fillna(0)\n    ndcg \u003d ndcgs.mean()\n    return ndcg",
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1501759629109_-1178125539",
      "id": "20170803-092346_1207574210",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "userItemReal \u003d explode_df(userdata,\u0027user\u0027,\u0027userItemTest\u0027,is_ranked\u003dFalse,names\u003d[\u0027user\u0027, \u0027item\u0027, \u0027score\u0027])\n\nfor typ in rec_types:\n    userItemRec \u003d explode_df(userdata,\u0027user\u0027,\u0027recommendation\u0027+typ,is_ranked\u003dTrue,names\u003d[\u0027user\u0027, \u0027item\u0027, \u0027rank\u0027])\n    ndcg \u003d ndcg_fast2(userItemReal, userItemRec, k)\n    print(\"%s \\n NDCG: %f\"%(typ,ndcg))",
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {
        "enabled": true,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Flink \n NDCG: 0.006305\nSpark \n NDCG: 0.009816\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1501759629110_-1176971293",
      "id": "20170705-145715_415950317",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Aug 3, 2017 1:27:09 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1501759629111_-1177356042",
      "id": "20170803-125430_1157508291",
      "dateCreated": "Aug 3, 2017 1:27:09 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "offlineMF\u0026eval",
  "id": "2CRZTB4M8",
  "angularObjects": {
    "2CQEV1KZW:shared_process": [],
    "2CRKCK1NF:shared_process": [],
    "2CRF8AWSP:shared_process": [],
    "2CP4WKAT7:shared_process": [],
    "2CPUXQHH6:shared_process": [],
    "2CPA1PCD9:shared_process": [],
    "2CN78HPAV:shared_process": [],
    "2CQ7RBMUN:shared_process": [],
    "2CRH2FK3R:shared_process": [],
    "2CQNSADQH:shared_process": [],
    "2CQRXZD89:shared_process": [],
    "2CRDUPHCE:shared_process": [],
    "2CNABP9UM:shared_process": [],
    "2CPXHZ2CH:shared_process": [],
    "2CRNE8QE4:shared_process": [],
    "2CPJDUB2G:shared_process": [],
    "2CNC49WN4:shared_process": [],
    "2CPW8TH9V:shared_process": [],
    "2CPUQ468Z:shared_process": []
  },
  "config": {},
  "info": {}
}